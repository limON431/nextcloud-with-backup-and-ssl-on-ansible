- name: Убедиться, что volume существует
  community.docker.docker_volume:
    name: nextcloud_data
    state: present

- name: Создание и запуск контейнера Nextcloud
  community.docker.docker_container:
    name: nextcloud
    image: nextcloud
    state: started
    restart_policy: always
    published_ports:
      - "8080:80"
    volumes:
      - nextcloud_data:/var/www/html

- name: Получить информацию о Docker volume nextcloud_data
  community.docker.docker_volume_info:
    name: nextcloud_data
  register: volume_info

- name: Создать скрипт резервного копирования
  ansible.builtin.copy:
    dest: /usr/local/bin/backup_nextcloud.sh
    mode: '0755'
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -e
      DATA_DIR="{{ volume_info.volume.Mountpoint }}"
      REMOTE_USER=user
      REMOTE_HOST=192.168.122.238
      REMOTE_DIR="/home/$REMOTE_USER/backups-nextcloud"
      DATE=$(date +%F_%H-%M)
      LOG_FILE="/var/log/nextcloud_backup.log"
      
      # Логирование начала резервного копирования
      echo "Starting backup at $(date)" >> "$LOG_FILE"
      
      # Проверка SSH-доступа с отладкой
      ssh -v -o BatchMode=yes "$REMOTE_USER@$REMOTE_HOST" "true" 2>> "$LOG_FILE" || {
        echo "SSH connection failed for $REMOTE_USER@$REMOTE_HOST" >> "$LOG_FILE"
        exit 1
      }
      
      # Создание директории на удалённом сервере
      ssh "$REMOTE_USER@$REMOTE_HOST" "mkdir -p $REMOTE_DIR" 2>> "$LOG_FILE" || {
        echo "Failed to create remote directory $REMOTE_DIR" >> "$LOG_FILE"
        exit 1
      }
      
      # Создание архива и передача на удалённый сервер
      tar -czf - "$DATA_DIR" | ssh "$REMOTE_USER@$REMOTE_HOST" "cat > $REMOTE_DIR/nextcloud-backup-$DATE.tar.gz" 2>> "$LOG_FILE" || {
        echo "Backup failed" >> "$LOG_FILE"
        exit 1
      }
      
      # Удаление старых резервных копий (старше 7 дней)
      ssh "$REMOTE_USER@$REMOTE_HOST" "find $REMOTE_DIR -name 'nextcloud-backup-*.tar.gz' -mtime +7 -delete" 2>> "$LOG_FILE" || {
        echo "Failed to clean old backups" >> "$LOG_FILE"
        exit 1
      }
      
      # Логирование успешного завершения
      echo "Backup completed successfully at $(date)" >> "$LOG_FILE"

- name: Добавить задание в crontab root'а
  ansible.builtin.cron:
    name: "Nextcloud backup job"
    minute: "30"
    hour: "3"
    job: "/usr/local/bin/backup_nextcloud.sh"
    user: root # Имя юзера
    state: present